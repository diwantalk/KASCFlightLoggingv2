@model KASCFlightLogging.Models.FlightLog

@{
    ViewData["Title"] = "Final Fields";
    var fields = ViewBag.FlightLogFields as IEnumerable<FlightLogField>;
}

<div class="container-fluid">
    <h1>Final Fields</h1>
    <hr />

    <div class="row mb-3">
        <div class="col-md-6">
            <dl class="row">
                <dt class="col-sm-4">@Html.DisplayNameFor(model => model.FlightDate)</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.FlightDate)</dd>

                <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Aircraft)</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.Aircraft.RegistrationNumber)</dd>

                <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Pilot)</dt>
                <dd class="col-sm-8">@($"{Model.Pilot?.FirstName} {Model.Pilot?.LastName}")</dd>
            </dl>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <form asp-action="FinalFields">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />

                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Flight Times</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="control-label">Departure Time</label>
                                    <input type="datetime-local" name="values[departure].Value" class="form-control" required />
                                    <input type="hidden" name="values[departure].FlightLogFieldId" value="@fields.FirstOrDefault(f => f.Name == StandardFields.DepartureTime)?.Id" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="control-label">Arrival Time</label>
                                    <input type="datetime-local" name="values[arrival].Value" class="form-control" required />
                                    <input type="hidden" name="values[arrival].FlightLogFieldId" value="@fields.FirstOrDefault(f => f.Name == StandardFields.ArrivalTime)?.Id" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @if (fields?.Any() == true)
                {
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Flight Log Fields</h5>
                        </div>
                        <div class="card-body">
                            @* Show existing required fields first in read-only mode *@
                            @foreach (var value in Model.Values.Where(v => v.FlightLogField.Required).OrderBy(v => v.FlightLogField.Order))
                            {
                                <div class="form-group mb-3">
                                    <label class="control-label">
                                        @value.FlightLogField.DisplayText
                                        <span class="text-danger">*</span>
                                        <span class="badge bg-secondary">Required</span>
                                    </label>
                                    @if (!string.IsNullOrEmpty(value.FlightLogField.Description))
                                    {
                                        <small class="form-text text-muted d-block">@value.FlightLogField.Description</small>
                                    }
                                    <div class="form-control bg-light">@value.Value</div>
                                    <input type="hidden" name="values[@value.FlightLogFieldId].Value" value="@value.Value" />
                                    <input type="hidden" name="values[@value.FlightLogFieldId].FlightLogFieldId" value="@value.FlightLogFieldId" />
                                </div>
                            }

                            @* Show non-required fields as editable *@
                            @foreach (var field in fields.Where(f => !f.Required && f.Name != StandardFields.DepartureTime && f.Name != StandardFields.ArrivalTime).OrderBy(f => f.Order))
                            {
                                var existingValue = Model.Values.FirstOrDefault(v => v.FlightLogFieldId == field.Id)?.Value;

                                <div class="form-group mb-3">
                                    <label class="control-label">
                                        @field.DisplayText
                                        <span class="badge bg-info">Optional</span>
                                    </label>
                                    @if (!string.IsNullOrEmpty(field.Description))
                                    {
                                        <small class="form-text text-muted d-block">@field.Description</small>
                                    }

                                    @switch (field.FieldType)
                                    {
                                        case FieldType.Number:
                                            <input type="number" name="values[@field.Id].Value" class="form-control" value="@existingValue" />
                                            break;
                                        case FieldType.Time:
                                            <input type="time" name="values[@field.Id].Value" class="form-control" value="@existingValue" />
                                            break;
                                        case FieldType.Date:
                                            <input type="date" name="values[@field.Id].Value" class="form-control" value="@existingValue" />
                                            break;
                                        case FieldType.DateTime:
                                            <input type="datetime-local" name="values[@field.Id].Value" class="form-control" value="@existingValue" />
                                            break;
                                        default:
                                            <input type="text" name="values[@field.Id].Value" class="form-control" value="@existingValue" />
                                            break;
                                    }
                                    <input type="hidden" name="values[@field.Id].FlightLogFieldId" value="@field.Id" />
                                </div>
                            }
                        </div>
                    </div>
                }

                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Final Fields
                    </button>
                    <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Details
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}